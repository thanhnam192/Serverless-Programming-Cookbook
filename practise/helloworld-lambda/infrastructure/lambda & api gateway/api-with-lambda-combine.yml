---
AWSTemplateFormatVersion: '2010-09-09'
Description: API with Lambda Integration Combination
Resources:
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: 'lambda-with-cf-policy-combination'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
      Path: "/"
      RoleName: "lambda-with-cf-role-combination"
  LambdaFunctionWithCF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 'serverless.barackka'
        S3Key: lambdaforapi.jar
      FunctionName: first-lambda-with-cloud-formation-combination
      Handler: tech.heartin.books.serverlesscookbook.MyLambdaHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: java8
      Timeout: 15
    DependsOn:
      - IamRoleLambdaExecution
  MyFirstRestAPICombination:
    Type: AWS::ApiGateway::RestApi
    DependsOn:
      - LambdaFunctionWithCF
    Properties:
      Name: Greeting API Lambda Combination
      Description: API for greeting an user
      FailOnWarnings: true
  GreetingResource:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - MyFirstRestAPICombination
    Properties:
      RestApiId: !Ref MyFirstRestAPICombination
      ParentId: !GetAtt MyFirstRestAPICombination.RootResourceId
      PathPart: 'lambdagreeting'

  NamePathParamResource:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - GreetingResource
    Properties:
      RestApiId: !Ref MyFirstRestAPICombination
      ParentId: !Ref GreetingResource
      PathPart: '{name}'

  MyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:  NamePathParamResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: "{\"name\": \"$input.params('name')\" , \"time\": \"$input.params('time')\"}"
        Uri:  !Sub  'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionWithCF.Arn}/invocations'
      ResourceId: !Ref NamePathParamResource
      RestApiId: !Ref MyFirstRestAPICombination
      MethodResponses:
        - StatusCode: 200
  MyDeployment:
    DependsOn: MyMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: 'First API with Lambda Combination'
      RestApiId: !Ref MyFirstRestAPICombination
      StageDescription:
        Description: 'Dev Stage'
      StageName: 'dev'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: MyMethod
    Properties:
      FunctionName: !GetAtt LambdaFunctionWithCF.Arn # !Ref LambdaFunctionWithCF   - is ok
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API_ID}/*/GET/lambdagreeting/{name}
        - API_ID: !Ref MyFirstRestAPICombination

Outputs:
  SampleEndpoint:
    Description: 'Sample Endpoint'
    Value: !Sub
      - https://${API_ID}.execute-api.${AWS::Region}.amazonaws.com/dev/lambdagreeting/Heartin
      - API_ID: !Ref MyFirstRestAPICombination
